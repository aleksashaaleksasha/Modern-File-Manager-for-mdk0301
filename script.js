 class FileManager {
  constructor() {
    // —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—ã DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    this.uploadArea = document.getElementById("upload-area");
    this.fileInput = document.getElementById("file-input");
    this.progressContainer = document.getElementById("upload-progress");
    this.progressFill = document.querySelector(".progress-fill");
    this.progressText = document.querySelector(".progress-text");
    this.fileList = document.getElementById("file-list");

    this.files = []; // –∑–¥–µ—Å—å —Ö—Ä–∞–Ω—è—Ç—Å—è —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏—Ç
    this.initializeEventListeners(); // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  }

  initializeEventListeners() {
    // –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å —Ñ–∞–π–ª–∞–º–∏ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ –æ–±–ª–∞—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏
    this.uploadArea.addEventListener("click", () => {
      this.fileInput.click();
    });

    // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–±—Ä–∞–Ω—ã –≤ –¥–∏–∞–ª–æ–≥–µ —Å —Ñ–∞–π–ª–∞–º–∏
    this.fileInput.addEventListener("change", (e) => {
      this.handleFiles(e.target.files);
    });

    // –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç —Ñ–∞–π–ª—ã, —Ç–æ –æ–±–ª–∞—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç—Å—è
    this.uploadArea.addEventListener("dragover", (e) => {
      e.preventDefault();
      this.uploadArea.classList.add("dragover");
    });

    // —É–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –∑–∞–≥—Ä–∑—É–∫–∏
    this.uploadArea.addEventListener("dragleave", (e) => {
      e.preventDefault();
      this.uploadArea.classList.remove("dragover");
    });

    // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, –Ω–æ —É–∂–µ —Ç–µ—Ö –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–Ω–µ—Å–ª–∏
    this.uploadArea.addEventListener("drop", (e) => {
      e.preventDefault();
      this.uploadArea.classList.remove("dragover");
      this.handleFiles(e.dataTransfer.files);
    });
  }

  handleFiles(fileList) {
    const validFiles = Array.from(fileList).filter((file) => {
      // –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–∞–π–ª—ã –±–æ–ª—å—à–µ —á–µ–º 100 –ú–ë
      if (file.size > 100 * 1024 * 1024) {
        alert(`${file.name} is too large. Maximum size is 100MB.`);
        return false;
      }
      return true;
    });

    if (validFiles.length > 0) {
      this.uploadFiles(validFiles);
    }
  }

  // –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å
  async uploadFiles(files) {

    // –ø–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    this.showProgress();

    for (let i = 0; i < files.length; i++) {
      const file = files[i];
      await this.uploadSingleFile(file, i + 1, files.length);
    }

    //—Å–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
    this.hideProgress();
  }

  // –∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  async uploadSingleFile(file, current, total) {
    return new Promise((resolve) => {
      let progress = 0;
      const interval = setInterval(() => {
        progress += Math.random() * 15;
        if (progress >= 100) {
          progress = 100;
          clearInterval(interval);

          // –¥–æ–±–∞–≤–ª—è–µ—Ç DOM –∫–∞—Ä—Ç–æ—á–∫—É —Ñ–∞–π–ª–∞ –≤ —Å–ø–∏—Å–æ–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ this.files
          this.addFileToList(file);
          resolve();
        }

        const overallProgress =
          ((current - 1) / total) * 100 + progress / total;
        this.updateProgress(
          overallProgress,
          `Uploading ${current} of ${total}...`
        );
      }, 200);
    });
  }

   // –¥–æ–±–∞–≤–ª—è–µ—Ç DOM –∫–∞—Ä—Ç–æ—á–∫—É —Ñ–∞–π–ª–∞ –≤ —Å–ø–∏—Å–æ–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ this.files
  addFileToList(file) {
    const fileCard = document.createElement("div");
    fileCard.className = "file-card";

    const fileIcon = this.getFileIcon(file.type);
    const fileSize = this.formatFileSize(file.size);

    fileCard.innerHTML = `
      <div class="file-info">
        <div class="file-icon">${fileIcon}</div>
        <h4>${file.name}</h4>
        <p>${fileSize} ‚Ä¢ ${new Date().toLocaleDateString()}</p>
      </div>
      <div class="file-actions">
        <button class="btn-delete" onclick="fileManager.deleteFile('${
          file.name
        }')">Delete</button>
      </div>
    `;

    this.fileList.appendChild(fileCard);
    this.files.push(file);
  }

   // —É–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –∏–∑ –º–∞—Å—Å–∏–≤–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  deleteFile(fileName) {
    this.files = this.files.filter((f) => f.name !== fileName);
    this.fileList.innerHTML = "";
    this.files.forEach((f) => this.addFileToList(f));
  }

  // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–Ω–æ–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
  getFileIcon(mimeType) {
    if (mimeType.startsWith("image/")) return "üñºÔ∏è";
    if (mimeType.startsWith("video/")) return "üé•";
    if (mimeType.startsWith("audio/")) return "üéµ";
    if (mimeType.includes("pdf")) return "üìÑ";
    if (mimeType.includes("word")) return "üìù";
    if (mimeType.includes("excel") || mimeType.includes("spreadsheet"))
      return "üìä";
    return "üìÅ";
  }


   // –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –±–∞–π—Ç—ã –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç ["Bytes", "KB", "MB", "GB"]
  formatFileSize(bytes) {
    if (bytes === 0) return "0 Bytes";
    const k = 1024;
    const sizes = ["Bytes", "KB", "MB", "GB"];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
  }

  // –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å
  showProgress() {
    this.progressContainer.classList.remove("hidden");
  }

  //–ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å
  hideProgress() {
    setTimeout(() => {
      this.progressContainer.classList.add("hidden");
      this.updateProgress(0, "Upload complete!");
    }, 1000);
  }

  updateProgress(percent, text) {
    this.progressFill.style.width = percent + "%";
    this.progressText.textContent = text;
  }
}

// –Ω–∞—Å–ª–µ–¥—É–µ—Ç –∫–ª–∞—Å—Å FileManager –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤ Filestack –¥–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
class EnhancedFileManager extends FileManager {
  constructor() {
    super();
    this.client = filestack.init("YOUR_API_KEY"); // –∫–ª—é—á API Filestack –≤—Å—Ç–∞–≤–∏—Ç—å –Ω—É–∂–Ω–æ
    this.picker = null;
    this.implementSearch(); // –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –Ω–∞–¥ –∑–æ–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
  }

  // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  initializeEventListeners() {
    super.initializeEventListeners();

    // –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–±–ª–∞—á–Ω–æ–º—É —Ö—Ä–∞–Ω–∏–ª–∏—â—É Filestack
    this.addFilestackButton();
  }

  // —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Filestack
  addFilestackButton() {
    const button = document.createElement("button");
    button.textContent = "Browse Cloud Storage"; // –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    button.className = "filestack-btn"; // —Å—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–∫–∏

    // –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç Filestack –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
    button.onclick = (e) => {
      e.stopPropagation(); // –¥–µ–ª–∞–µ—Ç —Ç–∞–∫, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–µ –≤—ã–∑—ã–≤–∞–ª–∏—Å—å
      this.openFilestack();
    };

    // Add the button to the upload area
    this.uploadArea.appendChild(button);
  }

  //–æ—Ç–∫—Ä—ã–≤–∞–µ—Ç Filestack
  openFilestack() {
    const options = {
      accept: ["image/*", "video/*", "application/pdf", ".doc", ".docx"], // –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤
      maxFiles: 10, // –ª–∏–º–∏—Ç —Ñ–∞–π–ª–æ–≤
      uploadInBackground: false, // –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ä–∞–∑—É
      onUploadDone: (result) => {
        // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ –ª–∏—Å—Ç –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        result.filesUploaded.forEach((file) => {
          this.addCloudFileToList(file);
        });
      },
    };

    // –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç Filestack picker —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –≤—ã—à–µ
    this.client.picker(options).open();
  }

  addCloudFileToList(file) {
    const fileCard = document.createElement("div");
    fileCard.className = "file-card cloud-file"; // —Å—Ç–∏–ª—å
    const preview = this.generatePreview(file);

    fileCard.innerHTML = `
            <div class="file-info">
                <div class="file-icon">‚òÅÔ∏è</div>
                <h4>${file.filename}</h4>
                <p>${this.formatFileSize(file.size)} ‚Ä¢ Cloud Storage</p>
                ${preview}
            </div>
            <div class="file-actions">
                <button class="btn-view" onclick="window.open('${
                  file.url
                }', '_blank')">View</button>
                <button class="btn-share" onclick="navigator.clipboard.writeText('${
                  file.url
                }')">Copy Link</button>
            </div>
        `;

    this.fileList.appendChild(fileCard); // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ –ª–∏—Å—Ç
  }

  async uploadSingleFile(file, current, total) {
    try {
      // –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∏—Å–ø–æ–ª—å–∑—É—è Filestack –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å
      const fileHandle = await this.client.upload(file, {
        onProgress: (evt) => {
          const progress = (evt.loaded / evt.total) * 100;
          const overallProgress =
            ((current - 1) / total) * 100 + progress / total;
          this.updateProgress(
            overallProgress,
            `Uploading ${current} of ${total}...`
          );
        },
      });

      // –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –ª–∏—Å—Ç —ç—Ç–æ—Ç —Ñ–∞–π–ª
      this.addCloudFileToList({
        filename: file.name,
        size: file.size,
        url: fileHandle.url,
      });
    } catch (error) {
      console.error("Upload failed:", error);
      alert(`Failed to upload ${file.name}. Please try again.`);
    }
  }

  // –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–≤—å—é –µ—Å–ª–∏ –º–æ–∂–µ—Ç
  generatePreview(file) {
    if (file.mimetype && file.mimetype.startsWith("image/")) {
      return `<img src="${file.url}" alt="Preview" 
              class="file-preview" 
              onclick="window.open('${file.url}', '_blank')" />`;
    } else if (file.mimetype === "application/pdf") {
      return `<iframe src="${file.url}" class="file-preview" height="150"></iframe>`;
    }
    return "";
  }

  //–¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –Ω–∞–¥ –∑–æ–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
  implementSearch() {
    const searchInput = document.createElement("input");
    searchInput.type = "text";
    searchInput.placeholder = "Search files...";
    searchInput.className = "search-input";

    this.uploadArea.insertAdjacentElement("beforebegin", searchInput);

    searchInput.addEventListener("input", (e) => {
      this.filterFiles(e.target.value);
    });
  }

  filterFiles(query) {
    const fileCards = this.fileList.querySelectorAll(".file-card");
    fileCards.forEach((card) => {
      const fileName = card.querySelector("h4").textContent.toLowerCase();
      card.style.display = fileName.includes(query.toLowerCase())
        ? "flex"
        : "none";
    });
  }
}

// –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EnhancedFileManager –¥–ª—è –∑–∞–º–µ–Ω—ã –æ–±—ã—á–Ω–æ–≥–æ Filemanager
const fileManager = new EnhancedFileManager();
